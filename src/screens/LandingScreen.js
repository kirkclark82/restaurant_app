import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Dimensions,
  ScrollView,
  TextInput,
  Alert
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { getProfile, isOnboardingCompleted, checkEmailExists } from '../utils/mobileStorage';

const { width, height } = Dimensions.get('window');

const LandingScreen = ({ onRefreshStatus }) => {
  const navigation = useNavigation();
  const [email, setEmail] = useState('');
  const [loginCode, setLoginCode] = useState('');
  const [isCheckingEmail, setIsCheckingEmail] = useState(false);
  const [isSendingCode, setIsSendingCode] = useState(false);
  const [isVerifyingCode, setIsVerifyingCode] = useState(false);
  const [emailExists, setEmailExists] = useState(false);
  const [codeSent, setCodeSent] = useState(false);

  useEffect(() => {
    // Check if user is already logged in
    const checkLoginStatus = async () => {
      try {
        console.log('=== LANDING SCREEN MOUNT DEBUG ===');
        console.log('LandingScreen: Checking login status...');
        const completed = await isOnboardingCompleted();
        console.log('LandingScreen: Onboarding completed status:', completed);
        console.log('LandingScreen: Type of completed:', typeof completed);
        
        if (completed === true) {
          // User is already logged in, but we can't navigate from here
          // The app state should handle this transition
          console.log('‚ö†Ô∏è LandingScreen: User logged in, waiting for app state change');
          console.log('‚ö†Ô∏è This might be why unknown users are going to home page');
        } else if (completed === false) {
          console.log('‚úÖ LandingScreen: User not logged in, staying on landing page');
        } else {
          console.log('‚ö†Ô∏è LandingScreen: Unexpected onboarding status:', completed);
        }
      } catch (error) {
        console.error('‚ùå Error checking login status:', error);
      }
    };
    
    // Debug navigation state
    console.log('LandingScreen: Component mounted, navigation object:', navigation);
    console.log('LandingScreen: Available routes:', navigation.getState()?.routes);
    
    checkLoginStatus();
    console.log('=== END LANDING SCREEN MOUNT DEBUG ===');
  }, [navigation]);

  const handleContinue = async () => {
    if (!email.trim()) {
      Alert.alert('Error', 'Please enter your email address');
      return;
    }

    if (!isValidEmail(email)) {
      Alert.alert('Error', 'Please enter a valid email address');
      return;
    }

    console.log('=== EMAIL CHECK DEBUG ===');
    console.log('Email entered:', email.trim());
    console.log('Starting email existence check...');
    setIsCheckingEmail(true);
    try {
      // Check if email exists in database using the dedicated function
      const emailExists = await checkEmailExists(email.trim());
      console.log('Email exists check result:', emailExists);
      console.log('Type of result:', typeof emailExists);
      
      if (emailExists === true) {
        // Email exists, show login code section
        console.log('‚úÖ Email found, showing login code section');
        setEmailExists(true);
        // Automatically send login code
        await sendLoginCode();
      } else if (emailExists === false) {
        // Email doesn't exist, go to onboarding to create account
        console.log('‚ùå Email not found, navigating to onboarding');
        console.log('About to call navigation.navigate("Onboarding")');
        navigation.navigate('Onboarding', { email: email.trim() });
        console.log('Navigation call completed');
      } else {
        console.log('‚ö†Ô∏è Unexpected result:', emailExists);
      }
    } catch (error) {
      console.error('‚ùå Error checking email:', error);
      Alert.alert('Error', 'Failed to check email. Please try again.');
    } finally {
      setIsCheckingEmail(false);
      console.log('=== END EMAIL CHECK DEBUG ===');
    }
  };

  const sendLoginCode = async () => {
    setIsSendingCode(true);
    try {
      // In a real app, this would call your backend API to send an email
      // For now, we'll simulate the email sending process
      console.log('Sending login code to:', email);
      
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Generate a 6-digit code (in production, this would be generated by backend)
      const code = Math.floor(100000 + Math.random() * 900000).toString();
      
      // For demo purposes, show the code in an alert
      // In production, this would be sent via email and not shown to user
      Alert.alert(
        'Login Code Sent!',
        `Your 6-digit login code has been sent to ${email}\n\nFor demo purposes, your code is: ${code}\n\nIn production, this would be emailed to you.`,
        [
          {
            text: 'OK',
            onPress: () => {
              setCodeSent(true);
              // Store the code temporarily for verification (in production, backend would handle this)
              global.tempLoginCode = code;
            }
          }
        ]
      );
    } catch (error) {
      console.error('Error sending login code:', error);
      Alert.alert('Error', 'Failed to send login code. Please try again.');
    } finally {
      setIsSendingCode(false);
    }
  };

  const handleVerifyCode = async () => {
    if (!loginCode.trim()) {
      Alert.alert('Error', 'Please enter the 6-digit login code');
      return;
    }

    if (loginCode.trim().length !== 6) {
      Alert.alert('Error', 'Please enter the 6-digit login code');
      return;
    }

    setIsVerifyingCode(true);
    try {
      // Verify the login code
      if (global.tempLoginCode === loginCode.trim()) {
        // Code is correct, log in
        try {
          // Set current user to the email being used
          const { setCurrentUser } = await import('../utils/mobileStorage');
          await setCurrentUser(email.trim());
          console.log('LandingScreen: Current user set to:', email.trim());
          
          // Mark onboarding as completed to enter main app
          const { setOnboardingCompleted } = await import('../utils/mobileStorage');
          await setOnboardingCompleted();
          console.log('LandingScreen: Onboarding marked as completed, should enter main app');
          
          // Show success message
          Alert.alert(
            'Success', 
            'Login code verified! Welcome back! Redirecting to main app...',
            [
              {
                text: 'OK',
                onPress: () => {
                  // The app should automatically detect the onboarding completion
                  // and show the main app screens
                  console.log('LandingScreen: Success alert dismissed, waiting for app state change');
                  
                  // Trigger app state refresh to show main app
                  if (onRefreshStatus) {
                    console.log('LandingScreen: Calling onRefreshStatus to update app state');
                    onRefreshStatus();
                  }
                }
              }
            ]
          );
        } catch (error) {
          console.error('Error completing onboarding:', error);
          Alert.alert('Error', 'Failed to complete login. Please try again.');
        }
      } else {
        Alert.alert('Error', 'Incorrect login code. Please check your email and try again.');
      }
    } catch (error) {
      console.error('Error verifying code:', error);
      Alert.alert('Error', 'Failed to verify code. Please try again.');
    } finally {
      setIsVerifyingCode(false);
    }
  };

  const handleResendCode = async () => {
    await sendLoginCode();
  };

  const handleCreateAccount = () => {
    console.log('LandingScreen: Create account button pressed');
    console.log('LandingScreen: Attempting to navigate to Onboarding with email:', email.trim());
    try {
      navigation.navigate('Onboarding', { email: email.trim() });
      console.log('LandingScreen: Navigation to Onboarding successful');
    } catch (error) {
      console.error('LandingScreen: Error navigating to Onboarding:', error);
    }
  };

  const handleBackToEmail = () => {
    setEmailExists(false);
    setLoginCode('');
    setCodeSent(false);
    delete global.tempLoginCode;
  };

  const isValidEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  return (
    <ScrollView 
      style={styles.container} 
      contentContainerStyle={styles.contentContainer}
      showsVerticalScrollIndicator={false}
    >
      <View style={styles.content}>
        {/* Hero Section */}
        <View style={styles.hero}>
          <View style={styles.heroContent}>
            <View style={styles.logoContainer}>
              <Text style={styles.logoIcon}>üçï</Text>
            </View>
          </View>
        </View>

        {/* Authentication Card */}
        <View style={styles.authCard}>
          <View style={styles.authHeader}>
            <Text style={styles.authIcon}>üç¥</Text>
            <Text style={styles.authTitle}>Welcome to Amore e Pasta!</Text>
            <Text style={styles.authSubtitle}>
              {emailExists 
                ? 'Check your email for a 6-digit login code' 
                : 'Sign in to continue to your personalized Italian dining experience'
              }
            </Text>
          </View>

          {!emailExists ? (
            // Email Input Section
            <View style={styles.inputSection}>
              <Text style={styles.inputLabel}>Email Address</Text>
              <View style={styles.inputContainer}>
                <TextInput
                  style={styles.textInput}
                  value={email}
                  onChangeText={setEmail}
                  placeholder="Enter your email address"
                  placeholderTextColor="#999"
                  keyboardType="email-address"
                  autoCapitalize="none"
                  autoCorrect={false}
                />
                <TouchableOpacity
                  style={styles.continueButton}
                  onPress={handleContinue}
                  disabled={isCheckingEmail}
                >
                  <Text style={styles.continueButtonText}>
                    {isCheckingEmail ? 'Checking...' : 'Continue'}
                  </Text>
                </TouchableOpacity>
              </View>
            </View>
          ) : (
            // Login Code Section
            <View style={styles.inputSection}>
              <Text style={styles.inputLabel}>6-Digit Login Code</Text>
              <Text style={styles.codeDescription}>
                We've sent a login code to {email}
              </Text>
              
              <View style={styles.codeInputContainer}>
                <TextInput
                  style={styles.codeInput}
                  value={loginCode}
                  onChangeText={setLoginCode}
                  placeholder="Enter 6-digit code"
                  placeholderTextColor="#999"
                  keyboardType="number-pad"
                  maxLength={6}
                  autoFocus={true}
                />
              </View>
              
              <TouchableOpacity
                style={styles.verifyButton}
                onPress={handleVerifyCode}
                disabled={isVerifyingCode}
              >
                <Text style={styles.verifyButtonText}>
                  {isVerifyingCode ? 'Verifying...' : 'Verify Code'}
                </Text>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={styles.resendButton}
                onPress={handleResendCode}
                disabled={isSendingCode}
              >
                <Text style={styles.resendButtonText}>
                  {isSendingCode ? 'Sending...' : 'Resend Code'}
                </Text>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={styles.backButton}
                onPress={handleBackToEmail}
              >
                <Text style={styles.backButtonText}>‚Üê Back to email</Text>
              </TouchableOpacity>
            </View>
          )}

          {/* New Account Option */}
          {!emailExists && (
            <View style={styles.newAccountSection}>
              <Text style={styles.newAccountText}>Don't have an account?</Text>
              <TouchableOpacity
                style={styles.createAccountButton}
                onPress={handleCreateAccount}
              >
                <Text style={styles.createAccountButtonText}>Create New Account</Text>
              </TouchableOpacity>
            </View>
          )}

          {/* Terms */}
          <Text style={styles.termsText}>
            By continuing, you agree to our Terms of Service and Privacy Policy
          </Text>
        </View>

        {/* Footer */}
        <View style={styles.footer}>
          <Text style={styles.footerText}>
            ¬© 2024 Amore e Pasta. All rights reserved.
          </Text>
          <Text style={styles.footerSubtext}>
            Bringing Italy to your table since 1985
          </Text>
        </View>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FDF6E3',
  },
  contentContainer: {
    flexGrow: 1,
    paddingBottom: 20, // Add bottom padding for better scrolling
  },
  content: {
    flex: 1,
    minHeight: '100%', // Ensure content takes full height
  },
  hero: {
    backgroundColor: '#FF6B6B',
    paddingTop: 80, // Increased back to give more space around the icon
    paddingBottom: 60, // Increased back to balance the section
    paddingHorizontal: 20,
    alignItems: 'center',
    justifyContent: 'center', // Center the icon vertically
  },
  heroContent: {
    alignItems: 'center',
    justifyContent: 'center', // Center the icon vertically
    flex: 1, // Take full height of hero section
  },
  logoContainer: {
    width: 120, // Increased back to make icon more prominent
    height: 120, // Increased back to make icon more prominent
    borderRadius: 60,
    backgroundColor: '#FFF',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 0, // No bottom margin since there's no text below
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  logoIcon: {
    fontSize: 60, // Increased back to make icon more prominent
  },
  authCard: {
    backgroundColor: '#FFF',
    margin: 15, // Reduced from 20 for better screen fit
    borderRadius: 20,
    padding: 20, // Reduced from 25 for better screen fit
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  authHeader: {
    alignItems: 'center',
    marginBottom: 25, // Reduced from 30 for better screen fit
  },
  authIcon: {
    fontSize: 42, // Reduced from 48 for better screen fit
    marginBottom: 15, // Reduced from 20 for better screen fit
  },
  authTitle: {
    fontSize: 22, // Reduced from 24 for better screen fit
    fontWeight: 'bold',
    color: '#333',
    textAlign: 'center',
    marginBottom: 8, // Reduced from 10 for better screen fit
    lineHeight: 28, // Reduced from 30 for better screen fit
  },
  authSubtitle: {
    fontSize: 15, // Reduced from 16 for better screen fit
    color: '#666',
    textAlign: 'center',
    lineHeight: 20, // Reduced from 22 for better screen fit
  },
  inputSection: {
    marginBottom: 20, // Reduced from 25 for better screen fit
  },
  inputLabel: {
    fontSize: 15, // Reduced from 16 for better screen fit
    fontWeight: '600',
    color: '#333',
    marginBottom: 8, // Reduced from 10 for better screen fit
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
  },
  textInput: {
    flex: 1,
    backgroundColor: '#F8F9FA',
    borderWidth: 1,
    borderColor: '#E9ECEF',
    borderRadius: 10,
    paddingHorizontal: 15,
    paddingVertical: 12,
    fontSize: 16,
    color: '#333',
  },
  continueButton: {
    backgroundColor: '#333',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderRadius: 10,
    minWidth: 100,
  },
  continueButtonText: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center',
  },
  showPasswordButton: {
    padding: 10,
  },
  showPasswordIcon: {
    fontSize: 24,
  },
  loginButton: {
    backgroundColor: '#FF6B6B',
    paddingVertical: 15,
    borderRadius: 10,
    marginBottom: 15,
  },
  loginButtonText: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center',
  },
  backButton: {
    paddingVertical: 15,
    alignItems: 'center',
  },
  backButtonText: {
    color: '#666',
    fontSize: 14,
    textDecorationLine: 'underline',
  },
  newAccountSection: {
    alignItems: 'center',
    marginTop: 15, // Reduced from 20 for better screen fit
    marginBottom: 15, // Reduced from 20 for better screen fit
  },
  newAccountText: {
    fontSize: 14,
    color: '#666',
    marginBottom: 12, // Reduced from 15 for better screen fit
  },
  createAccountButton: {
    backgroundColor: '#FFF',
    borderWidth: 2,
    borderColor: '#8B4513',
    paddingHorizontal: 25,
    paddingVertical: 12,
    borderRadius: 25,
  },
  createAccountButtonText: {
    color: '#8B4513',
    fontSize: 16,
    fontWeight: '600',
  },
  termsText: {
    fontSize: 12,
    color: '#999',
    textAlign: 'center',
    lineHeight: 18,
  },
  footer: {
    paddingHorizontal: 15, // Reduced from 20 for better screen fit
    paddingVertical: 25, // Reduced from 30 for better screen fit
    backgroundColor: '#333',
    alignItems: 'center',
  },
  footerText: {
    fontSize: 14,
    color: '#FFF',
    marginBottom: 5,
  },
  footerSubtext: {
    fontSize: 12,
    color: '#CCC',
    fontStyle: 'italic',
  },
  codeInputContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginTop: 10,
    marginBottom: 20,
  },
  codeInput: {
    width: 60,
    height: 60,
    borderWidth: 1,
    borderColor: '#E9ECEF',
    borderRadius: 10,
    textAlign: 'center',
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    backgroundColor: '#F8F9FA',
  },
  verifyButton: {
    backgroundColor: '#FF6B6B',
    paddingVertical: 15,
    borderRadius: 10,
    marginBottom: 15,
  },
  verifyButtonText: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center',
  },
  resendButton: {
    backgroundColor: '#FFF',
    borderWidth: 2,
    borderColor: '#8B4513',
    paddingVertical: 12,
    borderRadius: 25,
  },
  resendButtonText: {
    color: '#8B4513',
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center',
  },
  codeDescription: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    marginBottom: 15,
  },
});

export default LandingScreen;
